#lang racket/base

#|
The sequence of triangle numbers is generated by adding the 
natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over 
five divisors.

What is the value of the first triangle number to have over 
five hundred divisors?

|#

(require (except-in racket/set set-map)
         racket/list)

(define primes (list 2))

(define (generate-primes! n [p* primes] [c (add1 (last primes))])
  (cond [(zero? n)  
         (void)]
        
        [(null? p*) 
         (set! primes (append primes (list c)))
         (generate-primes! (sub1 n) primes (add1 c))]
        
        [(zero? (modulo c (car p*)))
         (generate-primes! n primes (add1 c))]
        
        [else
         (generate-primes! n (cdr p*) c)]))

(define (next-prime p)
  (let ([r (member p primes)])
    (if (= 1 (length r))
        (begin 
          (generate-primes! (floor (sqrt p)))
          (next-prime p))
        (cadr r))))

(define (factors n)
  #;(printf "(factors ~a)~%" n)
  (set-union (set 1 n) (pfactors n 2 (ceiling (sqrt n)))))

;; set-map in the library returns a list...
(define (set-map st f)
  (for/set ([e (in-set st)]) (f e)))

(define (pfactors n p limit)
  #;(printf "(pfactors ~a ~a ~a)~%" n p limit)
  (cond [(zero? (modulo n p))
         (let* ([d  (/ n p)]
                [f* (factors d)])
           (set-union (set-map f* (lambda (x) (* p x)))
                      f*
                      (set d p)))]
        [(< p limit)         
         (pfactors n (next-prime p) limit)]
        [else (set)]))

(define (triangle-number n)
  (for/fold ([v 0]) ([i (in-range (add1 n))])
    (+ v i)))

(define (solve [n 500])
  (let/ec break
    (for ([i (in-naturals 1)])
      (let* ([t (triangle-number i)]
             [c (set-count (factors t))])
        (when (< n c)
          (break i t))))))